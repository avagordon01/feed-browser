#!/usr/bin/env python3
import os
import sys
import opml
import feedparser
import concurrent.futures
import time
import configparser
import webbrowser
import glob
import itertools

config_dir = os.environ.get('XDG_CONFIG_HOME') or os.path.expandvars(os.path.join('$HOME', '.config'))
config_dir = os.path.join(config_dir, 'feed-browser')
config_filename = os.path.join(config_dir, 'config.ini')
config = configparser.ConfigParser()
config.read(config_filename)
try:
    last_read = time.strptime(config['feed-browser']['last-read'])
except KeyError:
    last_read = time.gmtime(0)

rss_urls = []
for filename in glob.glob(os.path.join(config_dir, '*.opml')):
    opml_file = opml.parse(filename)
    rss_urls.extend([x.xmlUrl for x in itertools.chain.from_iterable(opml_file)])
rss_urls = set(rss_urls)

def load_url(rss_url):
    return feedparser.parse(rss_url)
with concurrent.futures.ThreadPoolExecutor(max_workers = 256) as executor:
    feeds = executor.map(load_url, rss_urls)

entries = [item for feed in feeds for item in feed['items']]

def entry_time(entry):
    if 'updated_parsed' in entry:
        t = entry['updated_parsed']
    elif 'published_parsed' in entry:
        t = entry['published_parsed']
    if t is not None:
        return t
    else:
        return time.gmtime(0)
entries = sorted([x for x in entries if entry_time(x) > last_read], key=entry_time, reverse=True)

for x in entries:
    webbrowser.open(x.link)

last_read = time.gmtime()
config['feed-browser'] = {'last-read': time.asctime(last_read)}
with open(config_filename, 'w') as config_file:
    config.write(config_file)
